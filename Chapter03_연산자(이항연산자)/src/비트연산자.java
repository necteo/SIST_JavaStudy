/*
 * 		&	|	^	=>  회로
 * 
 * 		  &(*)	  |(+)	 ^
 * 	 00	   0	   0	 0
 * 	 01	   0	   1	 1
 * 	 10	   0	   1	 1
 * 	 11	   1	   1	 0
 *   --------------------------
 *     1100
 *     0101
 *     ----&
 *     0100 => 4
 *     
 *     1100
 *     0101
 *     ----|
 *     1101 => 13
 *     
 *     1100 ==> 12
 *     0101 ==> 5
 *     ---- ^ ==> 다른 비트 => 1 같은 비트 => 0
 *     1001 ==> 9
 *     
 *     27 & 13
 *     27 | 13
 *     27 ^ 13
 *     --------
 *     
 *     11011 => 27
 *     1101	 => 13
 *     
 *     11011
 *     01101
 *     ----- &
 *     01001 ==> 9
 *     
 *     11011
 *     01101
 *     ------ |
 *     11111 ==> 31
 *     
 *     11011
 *     01101
 *     ------ ^
 *     10110 ==> 22
 *     
 *     35 & 17
 *     35 | 17
 *     35 ^ 17
 *     
 *     100011
 *     010001
 *     ------ &
 *     000001 ==> 1
 *     
 *     100011
 *     010001
 *     ------ |
 *     110011 ==> 51
 *     
 *     100011
 *     010001
 *     ------ ^
 *     110010 ==> 50
 *     
 *     비트이동 연산자 / 비트연산자 => 산술연산자
 *     x>>y
 *     ----- x/2^y
 *     x<<y
 *     ----- x*2^y
 *     
 *     5<<3  ==> 5*2^3
 *     			   ---- 8 ==> 40
 *     5>>3  ==> 5/2^3
 *     			   ---- 8 ==> 5/8 ==> 0
 */
public class 비트연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(Integer.toBinaryString(35));
		System.out.println(Integer.toBinaryString(17));
		System.out.println(35&17);
		System.out.println(35|17);
		System.out.println(35^17);
	}

}
